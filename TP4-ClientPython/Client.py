class Client:  ## S,occupe de la syncro (On peux avoir une méthode syncronisation)
    """
    Classe représentant le client
    """

    def __init__(self, connexion, protocole):
        self.connexion = connexion
        self.protocol = protocole
        self.connexion.connect()

    def askServer(self, toSend):
        self.connexion.send(toSend)
        data = self.connexion.receive()

        return data


    def bonjour(self): ##Fonctionnel
        xmlData = self.protocol.generate("bonjourServeur")
        serverAnswer = self.askServer(xmlData)
        answer = self.protocol.interpreter(serverAnswer)
        return answer

    def serverName(self): ##Fonctionnel
        xmlData = self.protocol.generate("questionNomServeur")
        serverAnswer = self.askServer(xmlData)
        answer = self.protocol.interpreter(serverAnswer)
        return answer

    def folderList(self, folder): ##Fonctionnel
        xmlData = self.protocol.generate("questionListeDossier", folder)
        serverAnswer = self.askServer(xmlData)
        answer = self.protocol.interpreter(serverAnswer)
        return answer

    def createFolder(self, folder): ##Fonctionnel
        xmlData = self.protocol.generate("creerDossier", folder)
        serverAnswer = self.askServer(xmlData)
        answer = self.protocol.interpreter(serverAnswer)
        return answer

    def folderExist(self, folder): ##Fonctionnel
        xmlData = self.protocol.generate("questionListeDossiers", folder)
        serverAnswer = self.askServer(xmlData)
        answer = self.protocol.interpreter(serverAnswer)

        if (answer == "erreurDossierLecture"):
            return False

        elif (answer == "erreurDossierInexistant"):
            return False

        else:
            ## Si le serveur nous retourne une quelconque suite de fichier, ça veux dire qu'il existe, autrement le serveur nous envoie
            ## une balise nous indiquant l'inexistance du fichier.

            return True

    def fileExist(self, file): ##Fonctionnel
        filePath = self.getFilePath(file)
        fileName = self.getFileName(file)

        xmlData = self.protocol.generate("questionListeFichiers", filePath)
        serverAnswer = self.askServer(xmlData)
        answer = self.protocol.interpreter(serverAnswer)

        if (answer == "erreurDossierLecture"):
            return False

        elif (answer == "erreurDossierInexistant"):
            return False

        elif (answer == ""):
            ## Le dossier existe, mais le fichier n'existe pas dans ce dossier.
            return False
        else:
            filesInAnswer = answer.split(" ")
            for aFile in filesInAnswer:
                if (fileName == aFile):
                    return True

            ## Si le fichier n'est pas retrouver parmis la liste de fichiers envoyés
            return False



    def upload(self, folder):
        answer = self.askServer("televerserFichier")

        return answer

    def download(self, folder):
        answer = self.askServer("telechargerFichier")
        return answer

    def deleteFolder(self, folder): ##Fonctionnel
        if (self.folderExist(folder)):
            xmlData = self.protocol.generate("supprimerDossier", folder)
            serverAnswer = self.askServer(xmlData)
            answer = self.protocol.interpreter(serverAnswer)

        else:
            answer = "erreurDossierInexistant"

        return answer

    def fileList(self, folder): ##Fonctionnel
        xmlData = self.protocol.generate("questionListeFichiers", folder)
        serverAnswer = self.askServer(xmlData)
        answer = self.protocol.interpreter(serverAnswer)
        return answer

    def deleteFile(self, file):
        if (self.fileExist(file)):
            filePath = self.getFilePath(file)
            fileName = self.getFileName(file)

            xmlData = self.protocol.generateXmlContainingFilePathAndFileName(filePath, fileName, "supprimerFichier")
            convertedXmlData = self.protocol.convertToXml(xmlData)
            serverAnswer = self.askServer(convertedXmlData)
            answer = self.protocol.interpreter(serverAnswer)

        else:
            answer = "erreurFichierInexistant"

        return answer


    def identicalFile(self, file):
        answer = self.askServer("questionFichierIdentique")
        return answer

    def recentFile(self, file):
        answer = self.askServer("questionFichierRecent")
        return answer

    def update(self, folder):
        pass

    def quit(self):
        xmlData = self.protocol.generate("quitter")
        serverAnswer = self.askServer(xmlData)
        answer = self.protocol.interpreter(serverAnswer)
        return answer

    def getFilePath(self, file):
        split = file.rsplit("/", 1)
        filepath = split[0]
        return filepath

    def getFileName(self, file):
        ## Retourne seulement le nom du fichier d'un chemin donné complet.
        ## Retourne text.txt si l'entrée est : "C:/D3/D1/text.txt"

        split = file.rsplit("/", 1)
        fileName = split[1]
        return fileName
