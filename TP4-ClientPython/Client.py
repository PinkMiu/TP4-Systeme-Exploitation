class Client:  ## S,occupe de la syncro (On peux avoir une méthode syncronisation)
    """
    Classe représentant le client
    """

    def __init__(self, connexion, protocole):
        self.connexion = connexion
        self.protocol = protocole
        self.connexion.connect()

    def askServer(self, balise, text=''):
        ##Questionne le serveur et récupère l'information pour ensuite le traiter avec le protocole du Client

        toSend = self.protocol.generate(balise, text)
        self.connexion.send(toSend)
        data = self.connexion.receive()
        filteredData = self.protocol.interpreter(data)
        return filteredData

    def bonjour(self):
        answer = self.askServer("bonjourServeur")
        return answer

    def serverName(self):
        answer = self.askServer("questionNomServeur")
        return answer

    def folderList(self, folder):
        answer = self.askServer("questionListeDossier", folder)
        return answer

    def createFolder(self, folder):
        answer = self.askServer("creerDossier", folder)
        return answer

    def folderExist(self, folder):
        pass

    def upload(self, folder):
        answer = self.askServer("televerserFichier")
        return answer

    def download(self, folder):
        answer = self.askServer("telechargerFichier")
        return answer

    def deleteFolder(self, folder):
        answer = self.askServer("supprimerDossier")
        return answer

    def fileList(self, file):
        answer = self.askServer("questionListeFichier")
        return answer

    def fileExist(self, file):
        pass

    def deleteFile(self, file):
        answer = self.askServer("supprimerFichier")
        return answer

    def identicalFile(self, file):
        answer = self.askServer("questionFichierIdentique")
        return answer

    def recentFile(self, file):
        answer = self.askServer("questionFichierRecent")
        return answer

    def update(self, folder):
        pass
