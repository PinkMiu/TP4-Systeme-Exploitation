class Prompt:

    def __init__(self, client, invite_pattern = ">>"):
        self.invite_pattern = invite_pattern
        self.client = client
        self.startPrompt()

    def invite(self, message):
        answer = input(message)
        return answer

    def processCommand(self, input):
       temp = input.split(" ")
       command = temp[0]
       return command

    def getParameter(self, input ):
        temp = input.split(" ")
        parameter = temp[1]


    def startPrompt(self):
        while True:
            answer = self.invite(self.invite_pattern)

            command = self.processCommand(answer)
            parameter = self.getParameter(answer)

            if (command == 'connecter?'):
                toPrint = self.client.bonjour()

            elif (command == 'nomServeur?'):
                toPrint = self.client.serverName()

            elif (command == 'listeDossier?'):
                toPrint = self.client.folderList(parameter)

            elif (command == 'dossier?'):
                toPrint = self.client.folderExist(parameter)

            elif (command == 'creerDossier?'):
                toPrint = self.client.createFolder(parameter)

            elif (command == 'televerser?'):
                toPrint = self.client.upload(parameter)

            elif (command == 'telecharger?'):
                toPrint = self.client.update(parameter)

            elif (command == 'supprimerDossier?'):
                toPrint = self.client.deleteFolder(parameter)

            elif (command == 'listeFichier?'):
                toPrint = self.client.fileList(parameter)

            elif (command == 'fichier?'):
                toPrint = self.client.fileExist(parameter)

            elif (command == 'supprimerFichier?'):
                toPrint = self.client.deleteFile(parameter)

            elif (command == 'fichierIdentique?'):
                toPrint = self.client.identicalFile(parameter)

            elif (command == 'identiqueFichier?'):
                toPrint = self.client.identicalFile(parameter)

            elif (command == 'fichierRecent?'):
                toPrint = self.client.fichierRecent(parameter)

            elif (command == 'recentFichier?'):
                toPrint = self.client.recentFile(parameter)

            elif (command == 'miseAjour?'):
                toPrint = self.client.update(parameter)

            elif (command == 'quit'):
                break

            print(toPrint)
