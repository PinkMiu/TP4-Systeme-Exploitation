import json
from Protocole import Protocole


class Protocole_json(Protocole):  ## sous classe pour protocole json
    """Interface du langage de communication JSON"""

    def __init__(self, fileManager):
        super(Protocole_json, self).__init__()
        self.fileManager = fileManager

    def generateHelloServer(self):
        jsonString = {'salutation':'bonjourServeur'}
        jsonData = json.dumps(jsonString)
        return jsonData

    def generateServerName(self):
        jsonString = {'action':'questionNomServeur'}
        jsonData = json.dumps(jsonString)
        return jsonData

    def generate(self, balise, text=''):
        jsonString = {balise: text}
        jsonData = json.dumps(jsonString)
        return jsonData

    def generateStringFormat(self, balise, text=''):
        jsonString = {balise: text}
        return jsonString

    def generateFormatContainingFilePathAndFileName(self, filePath, fileName, balise, text=''):
        keyValue = {"nom":fileName,"dossier":filePath}
        mainKey = {balise:keyValue}
        return mainKey

    def generateFormatContainingFilePathAndFileNameAndDate(self, filePath, fileName, balise, text=''):
        date = self.fileManager.getDateOfModificationOfFile(filePath, fileName)

        keyValue = {"nom":fileName,"dossier":filePath,"date":date}
        mainKey = {balise:keyValue}
        return mainKey

    def generateFormatContainingSignatureAndBasicInformation(self, filePath, fileName, balise, text=''):
        date = self.fileManager.getDateOfModificationOfFile(filePath, fileName)
        signature = self.fileManager.getSignatureOfFile(filePath, fileName)

        keyValue = {"nom":fileName,"dossier":filePath,"signature":signature,"date":date}
        mainKey = {balise: keyValue}
        return mainKey

    def generateFormatContainingUploadInformation(self, filePath, fileName, balise, text=''):
        date = self.fileManager.getDateOfModificationOfFile(filePath, fileName)
        signature = self.fileManager.getSignatureOfFile(filePath, fileName)
        content = self.fileManager.getContentOfFile(filePath, fileName)


        keyValue = {"nom": fileName, "dossier": filePath, "signature": signature, "contenu":content,"date": date}
        mainKey = {balise: keyValue}
        return mainKey

    def convertToFormat(self, data):
        return json.dumps(data)

    def interpreter(self, data, key =''):
        jsonData = json.loads(data)

        try:
            jsonData[key]
        except:
            key = "reponse"

        if ("fichier" in jsonData[key]):
            answer = self.obtainDataFromFolders(jsonData[key], "fichier", " ")
        elif ("dossier" in jsonData[key]):
            answer = self.obtainDataFromFolders(jsonData[key], "dossier", "/")
        else:
            answer = jsonData[key]

        return answer

    def obtainDataFromFolders(self, key, sub_key, seperator=''):

        ## Si cette fonction retourne rien, cela veux dire que le fichier racine existe, il est vide, parcontre.
        data = ''
        for aKey in key:
            if aKey is not None:
                for aSubKey in key[sub_key]:
                    data += aSubKey + seperator
        return data

