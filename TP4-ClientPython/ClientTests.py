import unittest
import unittest.mock
from Client import Client
from Protocole_xml import Protocole_xml
from Prompt import Prompt


class ClientTests(unittest.TestCase):
    ##Tests methode askServer
    def testAskServerMethod_BonjourServeur_returnsBonjourClientInXmlFormat(self):
        toSend = "bonjourServeur"
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("bonjourClient")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.askServer(toSend)
        self.assertEquals(clientAnswer, returnValue)

    ##Test methode Bonjour
    def testAskBonjourMethod_returnsBonjourClient(self):
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("bonjourClient")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.bonjour()
        expected_answer = 'bonjourClient'
        self.assertEquals(clientAnswer, expected_answer)

    ##Test methode serverName
    def testAskServerNameMethod_returnsTheNameOfTheServer(self):
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("nomServeur", "TP4 Dropbox 2.0")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.serverName()
        expected_answer = 'TP4 Dropbox 2.0'
        self.assertEquals(clientAnswer, expected_answer)

    ##Tests methode folderList
    def testAskfolderListMethod_withEmptyFolder_returnsEmptyString(self):
        folder = 'folder'
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("listeDossiers")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.folderList(folder)
        expected_answer = ""
        self.assertEquals(clientAnswer, expected_answer)

    def testAskfolderListMethod_withExistAndNoEmpltyFolder_returnsListOfTheFolders(self):
        folder = 'folder1'
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        xmlFolder1 = protocole.generateXmlFormat("dossier", "folder2" )
        xmlFolder2 = protocole.generateXmlFormat("dossier", "folder3")
        xmlFolderList = protocole.generateXmlFormat("listeDossiers")
        xmlFolderList.childNodes[0].appendChild(xmlFolder1.childNodes[0])
        xmlFolderList.childNodes[0].appendChild(xmlFolder2.childNodes[0])
        returnValue = xmlFolderList.toxml()
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.folderList(folder)
        expected_answer = "folder2/folder3/"
        self.assertEquals(clientAnswer, expected_answer)

    def testAskfolderListMethod_withAnNonExistingFolder_returnsFolderDontExist(self):
        InexistantFolder = 'folder'
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("erreurDossierInexistant")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.folderList(InexistantFolder)
        expected_answer = "erreurDossierInexistant"
        self.assertEquals(clientAnswer, expected_answer)

    def testAskfolderListMethod_withAReadFolder_returnsFolderIsRead(self):
        aReadFolder = 'folder'
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("erreurDossierLecture")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.folderList(aReadFolder)
        expected_answer = "erreurDossierLecture"
        self.assertEquals(clientAnswer, expected_answer)

    ##Tests methode createFolder
    def testAskCreateFolderMethod_withAFolderName_returnsOK(self):
        folderToCreate = 'folder'
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("ok")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.createFolder(folderToCreate)
        expected_answer = "ok"
        self.assertEquals(clientAnswer, expected_answer)

    def testAskCreateFolderMethod_withAnAlreadyExistingFolder_returnsFolderAlreadyExist(self):
        folderToCreate = 'folder'
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("erreurDossierExiste")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.createFolder(folderToCreate)
        expected_answer = "erreurDossierExiste"
        self.assertEquals(clientAnswer, expected_answer)

    def testAskCreateFolderMethod_InsideAnNonExistingFolder_returnsFolderDontExist(self):
        folderToCreate = 'folder'
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("erreurDossierInexistant")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.createFolder(folderToCreate)
        expected_answer = "erreurDossierInexistant"
        self.assertEquals(clientAnswer, expected_answer)


if __name__ == '__main__':
    unittest.main()
