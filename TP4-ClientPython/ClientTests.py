import unittest
import unittest.mock
from Client import Client
from Protocole_xml import Protocole_xml
from Prompt import Prompt


class ClientTests(unittest.TestCase):
    def testBonjourMethod_returnsBonjourClient(self):
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("bonjourClient")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.bonjour()
        expected_answer = 'bonjourClient'
        self.assertEquals(clientAnswer, expected_answer)

    def testServerNameMethod_returnsTheNameOfTheServer(self):
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        returnValue = protocole.generate("nomServeur", "TP4 Dropbox 2.0")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.serverName()
        expected_answer = 'TP4 Dropbox 2.0'
        self.assertEquals(clientAnswer, expected_answer)

    def testfolderListMethod_returnsNothingWhenNoFolders(self):
        folder = 'folder'
        protocole = Protocole_xml()
        mock_connexion = unittest.mock.Mock()
        ##xmlFolder = protocole.generateXmlFormat("dossier", folder )
        ##xmlFolderList = protocole.generateXmlFormat("listeDossiers")
        ##returnValue = xmlFolderList.childNodes[0].appendChild(xmlFolder.childNodes[0]).toxml()
        returnValue = protocole.generate("listeDossiers")
        mock_connexion.receive.return_value = returnValue
        client = Client(mock_connexion, protocole)


        clientAnswer = client.folderList(folder)
        expected_answer = ""
        self.assertEquals(clientAnswer, expected_answer)


if __name__ == '__main__':
    unittest.main()
