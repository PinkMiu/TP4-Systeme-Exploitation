import xml.dom.minidom
import hashlib
import os
import binascii
import sys
from Protocole import Protocole


class Protocole_xml(Protocole):  ## sous classe pour protocole xml
    """Interface du langage de communication XML"""

    def __init__(self):
        super(Protocole_xml).__init__()

    def generateXmlFormat(self, balise, text=''):
        messageToSend = xml.dom.minidom.Document()

        newElement = messageToSend.createElement(balise)
        messageToSend.appendChild(newElement)

        if text:
            text_xml = messageToSend.createTextNode(text)
            newElement.appendChild(text_xml)

        return messageToSend

    def generate(self, balise, text=''):
        answer  = self.generateXmlFormat(balise, text)
        return answer.toxml()

    def convertToXml(self, data):
        return data.toxml()

    def interpreter(self, data):
        xmlData = xml.dom.minidom.parseString(data)

        if (xmlData.getElementsByTagName("bonjourClient")):
            answer = "bonjourClient"
            return answer

        elif (xmlData.getElementsByTagName("nomServeur")):
            for node in xmlData.getElementsByTagName("nomServeur"):
                answer = node.firstChild.data
                return answer

        elif (xmlData.getElementsByTagName("listeDossiers")):
            answer = self.obtainDataFromFolders(xmlData, "listeDossiers", "dossier", "/")
            return answer

        elif (xmlData.getElementsByTagName("erreurDossierInexistant")):
            answer = "erreurDossierInexistant"
            return answer

        elif (xmlData.getElementsByTagName("erreurDossierExiste")):
            answer = "erreurDossierExiste"
            return answer

        elif (xmlData.getElementsByTagName("erreurDossierLecture")):
            answer = "erreurDossierLecture"
            return answer

        elif (xmlData.getElementsByTagName("erreurFicherLecture")):
            answer = "erreurFichierLecture"
            return answer

        elif (xmlData.getElementsByTagName("ok")):
            answer = "ok"
            return answer

        elif (xmlData.getElementsByTagName("listeFichiers")):
            answer = self.obtainDataFromFolders(xmlData, "listeFichiers", "fichier", " ")
            return answer

        elif (xmlData.getElementsByTagName("bye")):
            answer = "bye"
            return answer

    def obtainDataFromFolders(self, xmlData, balise, sub_balise, seperator=''):

        ## Si cette fonction retourne rien, cela veux dire que le fichier racine existe, il est vide, parcontre.

        data = ''
        for node in xmlData.getElementsByTagName(balise):
            if node is not None:
                for node2 in node.getElementsByTagName(sub_balise):
                    data += node2.firstChild.data + seperator
        return data

    def generateXmlContainingFilePathAndFileName(self, filePath, fileName, balise, text=''):
        xmlFileName = self.generateXmlFormat("nom", fileName)
        xmlFilePath = self.generateXmlFormat("dossier", filePath)
        xmlParentNode = self.generateXmlFormat(balise)

        xmlParentNode.childNodes[0].appendChild(xmlFileName.childNodes[0])
        xmlParentNode.childNodes[0].appendChild(xmlFilePath.childNodes[0])
        return xmlParentNode

    def generateXmlContainingFilePathAndFileNameAndDate(self, filePath, fileName, balise, text=''):
        xmlParentNode = self.generateXmlContainingFilePathAndFileName(filePath, fileName, balise, text)

        xmlDateContent = self.generateXmlOfTheDateOfModification(filePath, fileName)

        xmlParentNode.childNodes[0].appendChild(xmlDateContent.childNodes[0])
        return xmlParentNode

    def generateXmlOfTheDateOfModification(self, filePath, fileName):
        completeFileName = filePath.append(fileName)

        try:
            # Voici comment lire le contenu d'un fichier
            file = open(completeFileName)
            fileContent = file.read()
            file.close()

            fileStat = os.stat(completeFileName)

        except:
            print("Impossible de lire le fichier " + completeFileName)
            sys.exit(1)

        # Génération de la date de modification du fichier
        lastTimeModifiedDate = str(fileStat.st_mtime)

        xmlDate = self.generateXmlFormat("date", lastTimeModifiedDate)
        return xmlDate

    def generateXmlSignature(self, filePath, fileName):
        completeFileName = filePath.append(fileName)

        try:
            # Voici comment lire le contenu d'un fichier
            file = open(completeFileName)
            fileContent = file.read()
            file.close()

        except:
            print("Impossible de lire le fichier " + completeFileName)
            sys.exit(1)

        # Encoder le fichier binaire en format UTF-8.
        utf8Content = fileContent.encode(encoding='UTF-8')

        # Génération de la signature du fichier
        md5Signature = hashlib.md5()
        md5Signature.update(utf8Content)

        signature = md5Signature.hexdigest()

        xmlSignature = self.generateXmlFormat("signature", signature)
        return xmlSignature

    def generateXmlOfFileContent(self,filePath, fileName):
        completeFileName = filePath.append(fileName)

        try:
            # Voici comment lire le contenu d'un fichier
            file = open(completeFileName)
            fileContent = file.read()
            file.close()

        except:
            print("Impossible de lire le fichier " + completeFileName)
            sys.exit(1)

        # Encoder le fichier binaire en format UTF-8.
        utf8Content = fileContent.encode(encoding='UTF-8')

        # Voici comment encoder le contenu du fichier
        encodedContent = binascii.b2a_base64(utf8Content)

        # Aller chercher les codes ASCII de l'encodage
        asciiContent = encodedContent.decode(encoding='ascii')
        xmlContent = self.generateXmlFormat("contenu", asciiContent)
        return xmlContent

    def generateXmlOfGivenFile(self, fileName, filePath): ## méthode modifiée du site web du professeur, cours #19
        completeFileName = filePath.append(fileName)

        try:
            # Voici comment lire le contenu d'un fichier
            file = open(completeFileName)
            fileContent = file.read()
            file.close()

            fileStat = os.stat(completeFileName)

        except:
            print("Impossible de lire le fichier " + completeFileName)
            sys.exit(1)

        # Génération de la date de modification du fichier
        lastTimeModifiedDate = str(fileStat.st_mtime)

        # Encoder le fichier binaire en format UTF-8.
        utf8Content = fileContent.encode(encoding='UTF-8')

        # Voici comment encoder le contenu du fichier
        encodedContent = binascii.b2a_base64(utf8Content)

        # Aller chercher les codes ASCII de l'encodage
        asciiContent = encodedContent.decode(encoding='ascii')

        # Génération de la signature du fichier
        md5Signature = hashlib.md5()
        md5Signature.update(utf8Content)

        signature = md5Signature.hexdigest()

        xmlFileName = self.generateXmlFormat("nom", fileName)
        xmlFilePath=  self.generateXmlFormat("dossier", filePath)
        xmlSignature = self.generateXmlFormat("signature", signature)
        xmlContent = self.generateXmlFormat("contenu", asciiContent)
        xmlDate = self.generateXmlFormat("date", lastTimeModifiedDate)

        xmlFile = self.generateXmlFormat("fichier")

        xmlFile.childNodes[0].appendChild(xmlFileName.childNodes[0])
        xmlFile.childNodes[0].appendChild(xmlFilePath.childNodes[0])
        xmlFile.childNodes[0].appendChild(xmlSignature.childNodes[0])
        xmlFile.childNodes[0].appendChild(xmlContent.childNodes[0])
        xmlFile.childNodes[0].appendChild(xmlDate.childNodes[0])

        xmlFile.toxml()