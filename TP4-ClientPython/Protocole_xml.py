import xml.dom.minidom
from Protocole import Protocole


class Protocole_xml(Protocole):  ## sous classe pour protocole xml
    """Interface du langage de communication XML"""

    def __init__(self, fileManager):
        super(Protocole_xml).__init__()
        self.fileManager = fileManager

    def generateStringFormat(self, balise, text=''):
        messageToSend = xml.dom.minidom.Document()

        newElement = messageToSend.createElement(balise)
        messageToSend.appendChild(newElement)

        if text:
            text_xml = messageToSend.createTextNode(text)
            newElement.appendChild(text_xml)

        return messageToSend

    def generateHelloServer(self):
        answer = self.generate("bonjourServeur")
        return answer

    def generateServerName(self):
        answer = self.generate("questionNomServeur")
        return answer

    def generate(self, balise, text=''):
        answer  = self.generateStringFormat(balise, text)
        return answer.toxml()

    def convertToFormat(self, data):
        return data.toxml()

    def interpreter(self, data, key = ''):
        xmlData = xml.dom.minidom.parseString(data)

        if (xmlData.getElementsByTagName("bonjourClient")):
            answer = "bonjourClient"

        elif (xmlData.getElementsByTagName("nomServeur")):
            for node in xmlData.getElementsByTagName("nomServeur"):
                answer = node.firstChild.data

        elif (xmlData.getElementsByTagName("listeDossiers")):
            answer = self.obtainDataFromFolders(xmlData, "listeDossiers", "dossier", "/")

        elif (xmlData.getElementsByTagName("listeFichiers")):
            answer = self.obtainDataFromFolders(xmlData, "listeFichiers", "fichier", " ")

        elif (xmlData.getElementsByTagName("erreurDossierInexistant")):
            answer = "erreurDossierInexistant"

        elif (xmlData.getElementsByTagName("erreurFichierInexistant")):
            answer = "erreurFichierInexistant"

        elif (xmlData.getElementsByTagName("erreurDossierExiste")):
            answer = "erreurDossierExiste"

        elif (xmlData.getElementsByTagName("erreurDossierLecture")):
            answer = "erreurDossierLecture"

        elif (xmlData.getElementsByTagName("erreurFicherLecture")):
            answer = "erreurFichierLecture"

        elif (xmlData.getElementsByTagName("ok")):
            answer = "ok"

        elif (xmlData.getElementsByTagName("oui")):
            answer = "oui"

        elif (xmlData.getElementsByTagName("non")):
            answer = "non"

        elif (xmlData.getElementsByTagName("fichier")):
            signature = self.obtainDataFromFolders(xmlData, "fichier", "signature")
            content = self.obtainDataFromFolders(xmlData, "fichier", "contenu")
            date = self.obtainDataFromFolders(xmlData, "fichier", "date")

            answer = {"signature":signature ,"content":content, "date":date}


        elif (xmlData.getElementsByTagName("erreurSignature")):
            answer = "erreurSignature"

        elif (xmlData.getElementsByTagName("erreurFichierExiste")):
            answer = "erreurFichierExiste"

        elif (xmlData.getElementsByTagName("bye")):
            answer = "bye"

        return answer

    def obtainDataFromFolders(self, xmlData, balise, sub_balise, seperator=''):

        ## Si cette fonction retourne rien, cela veux dire que le fichier racine existe, il est vide, parcontre.
        data = ''
        for node in xmlData.getElementsByTagName(balise):
            if node is not None:
                for node2 in node.getElementsByTagName(sub_balise):
                    data += node2.firstChild.data + seperator
        return data

    def generateFormatContainingFilePathAndFileName(self, filePath, fileName, balise, text=''):
        xmlFileName = self.generateStringFormat("nom", fileName)
        xmlFilePath = self.generateStringFormat("dossier", filePath)
        xmlParentNode = self.generateStringFormat(balise)

        xmlParentNode.childNodes[0].appendChild(xmlFileName.childNodes[0])
        xmlParentNode.childNodes[0].appendChild(xmlFilePath.childNodes[0])
        return xmlParentNode

    def generateFormatContainingFilePathAndFileNameAndDate(self, filePath, fileName, balise, text=''):
        xmlParentNode = self.generateFormatContainingFilePathAndFileName(filePath, fileName, balise, text)

        xmlDateContent = self.generateDateOfModification(filePath, fileName)

        xmlParentNode.childNodes[0].appendChild(xmlDateContent.childNodes[0])
        return xmlParentNode

    def generateFormatContainingSignatureAndBasicInformation(self, filePath, fileName, balise, text=''):
        xmlParentNode = self.generateFormatContainingFilePathAndFileNameAndDate(filePath, fileName, balise)

        xmlSignatureContent = self.generateSignature(filePath, fileName)

        xmlParentNode.childNodes[0].appendChild(xmlSignatureContent.childNodes[0])
        return xmlParentNode

    def generateFormatContainingUploadInformation(self, filePath, fileName, balise, text=''):
        xmlParentNode = self.generateFormatContainingFilePathAndFileName(filePath, fileName, balise)
        xmlSignature = self.generateSignature(filePath, fileName)
        xmlContent = self.generateFileContent(filePath, fileName)
        xmlDate = self.generateDateOfModification(filePath, fileName)

        xmlParentNode.childNodes[0].appendChild(xmlSignature.childNodes[0])
        xmlParentNode.childNodes[0].appendChild(xmlContent.childNodes[0])
        xmlParentNode.childNodes[0].appendChild(xmlDate.childNodes[0])
        return xmlParentNode

    def generateDateOfModification(self, filePath, fileName):
        lastTimeModifiedDate = self.fileManager.getDateOfModificationOfFile(filePath, fileName)

        xmlDate = self.generateStringFormat("date", lastTimeModifiedDate)
        return xmlDate

    def generateSignature(self, filePath, fileName):
        signature = self.fileManager.getSignatureOfFile(filePath, fileName)

        xmlSignature = self.generateStringFormat("signature", signature)
        return xmlSignature


    def generateFileContent(self, filePath, fileName):
        asciiContent = self.fileManager.getContentOfFile(filePath, fileName)

        xmlContent = self.generateStringFormat("contenu", asciiContent)
        return xmlContent
